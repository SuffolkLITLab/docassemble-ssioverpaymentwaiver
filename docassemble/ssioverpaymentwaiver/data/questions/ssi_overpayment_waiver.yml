---
metadata:
  title: Social Security Overpayment Waiver or Change in Repayment Rate
  short title: Overpayment Waiver or Change
  revision_date: 2022-01-15
  description: |
    If you were paid too much money by the Social Security Administration and are        required to pay it back, you can use this form to request a change in the            repayment amount or a waiver of part of the overpayment.
  can_i_use_this_form: |
    You can use this form if:
    
    * You agree that you were overpaid
    * You want to ask the Social Security Administration to waive the overpayment or       reduce the amount you have to pay back
    * You have received a notice from the Social Security Administration that you          were overpaid
    * You have information about your income, expenses, and assets
  help: |
      [What can I do if I’m notified that I have an overpayment](https://www.ssa.gov/faqs/en/questions/KA-02345.html)
      [Understanding SSI Overpayments](https://www.ssa.gov/ssi/text-overpay-ussi.htm)
  before_you_start: |
    Before you start, you should find:
    
    1. The notice from Social Security that says that you owe money.
    2. Information about the money that you get each month, and the money that
    people who live with you get.
    3. Find out if you get SSI, SSDI, or both.
    4. Information about how you save and spend money, such as bank statements
    and bills.
  maturity: production
  estimated_completion_minutes: 30
  estimated_completion_delta: 10
  languages:
    - en
  help_page_url: "https://www.masslegalhelp.org/public-benefits-ssi/social-security-ssi/ssi-ssdi-and-overpayments"
  help_page_title: "SSI, SSDI, and overpayments"
  LIST_topics:
    - BE-01-03-00-00
  tags:
    - BE-01-03-00-00
  jurisdiction: NAM-US
  original_form: "https://www.ssa.gov/forms/ssa-632.html"
  form_numbers:
    - SSA-632
    - SSA-634
  form_titles:
    - Request for Waiver of Overpayment Recovery or Change in Repayment Rate
    - Waiver of Overpayment Recovery
  fees: []
  update_notes: |
    Changed exemption from $20 to $55 per new POMs in 2023
---
features:
  question help button: True
  question back button: True
  default icons: material icons
  navigation: True
  javascript: 
    - ssa.js
    - phone.js
---
modules:
  - docassemble.GithubFeedbackForm.github_issue
  - .addendum
---
default screen parts:
  under: |
    % if not user_logged_in():
    [:sign-in-alt: Sign-in](${url_of('login', next=interview_url())}) or [register](${url_of('register', next=interview_url())}) to save your progress (optional).
    % endif
    [:comment-dots: Feedback](${ feedback_link(user_info(), github_repo="docassemble-ssioverpaymentwaiver", github_user="nonprofittechy") })    
  pre: |
    % if get_config('debug'):
    `id: ${ user_info().question_id }`
    % endif
---
include:
  - ssa_634.yml
  - financial_statement.yml
  #- docassemble.gbls:basic-questions-gbls.yml
  - docassemble.ssa:ssa.yml
  - docassemble.VLPBranding:vlp_branding.yml
  - docassemble.MATCTheme:matc_theme.yml
---
objects:
  - recordee: Individual
  - ssa_office: Person
  - officelist: FieldOfficeList
---
modules:
  - .ssa
  - docassemble.ALToolbox.misc
  - .fix_currency
---
features:
  css: docassemble.ALToolbox:collapse_template.css  
---
sections:
  - Getting started
  - Who is requesting a waiver?
  - Information about the overpayment
  - Financial information
  - Finishing up
---
id: interview order
mandatory: True
scan for variables: False
code: |
  multi_user = True
  nav.set_section('Getting started')
  intro_screen
  client.name.first

  nav.set_section('Who is requesting a waiver?')
  client_is_overpaid_person
  if not filing_for == 'self' and relationship_to_user['rep_payee']:
    warn_personal_liability
  elif not filing_for == 'self':
    warn_answer_as_if_recipient
  agree_overpaid
  if not agree_overpaid:
    continue_anyway
  
  if not client_is_overpaid_person:
    client_lives_with_overpaid_person
  recordee.name.first
    
    
  #recordee.ssn
  #recordee.claim_number    
  
  if recordee == client:
    client_is_rep_payee = False
    
  
  nav.set_section('Information about the overpayment')
  client_has_overpayment_notice  
  if only_change_monthly_due:
    #explain_ssa_634
    ssa_634
    saw_signature_choice
    if not (signature_choice == 'paper'):
      client.signature    
    preview_pdf
    download_pdf
  #else:
  #  explain_ssa_632

  payment_type
  overpayment_reason
  #overpayment_explanation

  if client_is_rep_payee:
    overpayment_benefits_used_for

  if informed_ssa:
    benefits_changed_after_contact

  # Not used on new form
  # overpayment_why_not_at_fault  
  
  if possess_overpayment:
    pay_ssa_explanation
  
  overpayment_pay_less_reasons
  cant_pay_at_all
  overpayment_waiver_second_request

  first_overpayment

  gave_cash_after_notice
  will_receive_inheritance
  
  nav.set_section('Financial information')
  evaluate_if_receives_benefits # We may already know--use code to set if true
  if receives_benefits:
    receives_benefits_type
    cash_amount = DAEmpty()
    vehicles = DAEmpty()
    household.jobs = DAEmpty()
    household.incomes = DAEmpty()
    client.jobs = DAEmpty()
    client.incomes =  DAEmpty()
    spouse.jobs = DAEmpty()
    spouse.incomes = DAEmpty()
    expenses = DAEmpty()
    real_estate = DAEmpty()
    assets = DAEmpty()
    assets_cannot_be_sold = DAEmpty()
    assets_cannot_be_converted = DAEmpty()
    accounts_special_purpose = DAEmpty()
    dont_need_financials_explanation
    expenses_exceed_income = DAEmpty()
    expense_other_details = DAEmpty()
  else:
    need_financials_explanation
    if not household.there_are_any:
      household.target_number = 0
      household.gathered = True

    if has_spouse:
      spouse.name.first
    if household.there_are_any:
      review_household_members
    
    household_questions  
    cash_amount
    financial_statement_questions
    assets.there_are_any
    #if assets.there_are_any:
    #  accounts_special_purpose
    if non_cash_assets or vehicles.there_are_any or real_estate.there_are_any:
      assets_cannot_be_sold
    if expenses_exceed_income:
      expenses_exceed_income_explanation
    authorize_disclosure_to_ssa      
    
  nav.set_section('Finishing up')
  client.address.address
  ssa_office.address.address  
  preview_pdf
  run_signature_flow
  
  store_variables_snapshot(data={'zip':client.address.zip,
    'state':client.address.state,
    'client_is_rep_payee':client_is_rep_payee,
    'client_goals':client_goals,
    'agree_overpaid': agree_overpaid,
    'payment_type':payment_type.true_values(),
    'overpayment_reason': overpayment_reason,
    'possess_overpayment': possess_overpayment,
    'overpayment_pay_less_reasons': overpayment_pay_less_reasons,
    'informed_ssa':informed_ssa,
    'cant_pay_at_all': cant_pay_at_all,
    'informed_ssa': informed_ssa,
    'first_overpayment': first_overpayment,
    'receives_benefits': receives_benefits,
    'date':today(),
    })  
  download_pdf
  #financial_statement_download_screen
---
template: who_needs_to_fill_this_out
subject: |
  Special information for rep payees
content: |
  **If you are a representative payee**,
  you may be personally responsible for some of the money that
  Social Security paid.
  
  Both:
  
  * you
  * the person who gets the benefits
  
  should fill out a copy of this form. If a mistake that you made as the               representative payee caused the overpayment, then the person who gets the benefits   should fill this out on their own. You can still fill out a copy for your personal
  request to Social Security.
  
---
id: client_is_overpaid_person
question: |
  ${ client.familiar() }, are you filing for yourself or someone else?
fields:
  - no label: filing_for
    datatype: radio
    choices:
      - Myself: self
      - Someone else: someone_else
  - How are you related to the person who got too much money?: relationship_to_user
    datatype: checkboxes
    choices:
      - Parent: parent
      - Representative payee: rep_payee
      - Spouse: spouse
      - Legal guardian: legal_guardian
      - Other: other
    show if:
      variable: filing_for
      is: someone_else      
  - Please explain (include the name of any organization you work for): client_relationship_other_explanation
    datatype: area
    show if: relationship_to_user['other']
---
depends on:
  - filing_for
code: |
  client_is_overpaid_person = filing_for == "self"
---
id: warn_personal_liability
continue button field: warn_personal_liability
question: |
  You may have a personal responsibility to pay back the money  
subquestion: |
  If you are a representative payee, Social Security can decide
  that you have to pay back some of the money personally.
  
  It is important that both:
  
  * you
  * the person who gets the benefits
  
  each fill out their own copy of this form.
  
  If you have a conflict of interest with the person who got the benefits:
  someone else should help them fill out their copy.
  
  An example of a conflict of interest would be if a mistake that you
  personally made caused Social Security to pay too much.
---
id: warn_answer_as_if_recipient
continue button field: warn_answer_as_if_recipient
question: |
  Answer these questions as if you are the person who got the benefits
subquestion: |
  Some of the questions in this website ask about "you". When you see a question
  about "you", answer as though you are the person who got the benefits.
---
id: client_has_overpayment_notice
question: |
  Do you have the notice from Social Security administration with you?
help: |
      To find this information, look for the notice from Social Security that says         you owe them money
fields:
  - no label: client_has_overpayment_notice
    datatype: yesnoradio
  - What is the __date__ on the notice?: overpayment_notice_date
    datatype: date
    show if: client_has_overpayment_notice
  - What is the __first__ month you were overpaid?: overpayment_notice_first_overpayment
    help: |
      Include the year and month of your __first__ overpayment - *example*: 01/2024
    show if: client_has_overpayment_notice
  - What is the __last__ month you were overpaid?: overpayment_notice_last_overpayment
    help: |
      Include the year and month of your __last__ overpayment - *example*: 06/2024
    show if: client_has_overpayment_notice
  - If you were only overpaid for one month, what is the month?: overpayment_notice_exact_month
    required: False  
    help: |
      Only answer here if you were overpaid for 1 month. Include the year and month        of the only month you were overpaid - *example* 04/2024
    show if: client_has_overpayment_notice    
  - What is the total dollar amount you were overpaid?:                   notice_overpayment_amount
    datatype: currency
    help: |
      Add up the amount you were overpaid each month and put the total here -              *example* $10000
    show if: client_has_overpayment_notice
---
id: will_receive_inheritance
question: |
  Do you expect to receive an inheritance in the next 6 months?
fields:
  - no label: will_receive_inheritance
    datatype: yesnoradio
  - Please explain: will_receive_inheritance_explanation
    datatype: area
    show if: will_receive_inheritance
---
code: |
  # Keep in own code block so it's only evaluated once
  started_on_phone = device() and device().is_mobile
---
code: |
  # The phone/email method will only work if
  # we enforce logins
  if started_on_phone:
    saw_signature_choice = True # Don't ask how they want to sign
    client.signature
  else: 
    saw_signature_choice
    if defined('signature_choice') and signature_choice =='this device':
      client.signature
    elif defined('signature_choice') and signature_choice == 'phone':
      saw_signature_qrcode
      if defined('link_cell') or defined('link_email'):
        if defined('link_cell') and link_cell and task_not_yet_performed('send signature link'):
          send_sms(task='send signature link', to=link_cell,template=interview_link)
        if defined('link_email') and link_email:
          send_email(task='send signature link', to=link_email, template=interview_link)
        signature_wait_screen
        client.signature
        if device() and device().is_mobile:
          signature_phone_followup
      else:
        client.signature
    # Handle situation where someone uses the QR code    
    if saw_signature_choice and not defined('signature_choice'):
      client.signature
      signature_phone_followup
      signature_choice = 'phone'
  run_signature_flow = True  
---
id: signature wait screen
question: |
  % if defined('client.signature'):
  Thank you for signing
  % else:
  Add your signature
  % endif
subquestion: |
  % if defined('client.signature'):
  Click continue.
  % else:
  % if device() and device().is_mobile:
  Click continue on this screen when you're ready to sign.
  % else:
  Click continue to sign on this device. Wait here if you
  sent a link to sign to someone else. Click continue
  when your signature has been added.
  % endif
  % endif

field: signature_wait_screen
decoration: file-signature
---
id: signature phone followup
question: |
  Continue on the device you started the interview on
subquestion: |
  Thank you for signing. You can close this browser on your phone.
  Keep going on the computer you started the interview on.
field: signature_phone_followup  
---
id: signature-phone
question: |
  Sign your forms
fields:
  - note: |
      1. Open the camera app or barcode reader app on your phone.
      2. Point it at the screen.
      3. Click the link icon that appears on the camera screen.
      4. Click ${word("continue")} on your phone.
      
      <center>
      ${interview_url_as_qr()}
      </center>

    show if: 
      code: |
        device() and device().is_pc
  - Email a link instead: email_link
    datatype: yesnowide
    show if: 
      code: |
        device() and device().is_pc
  - Email address: link_email
    show if: email_link
  - Text a link instead: text_link
    datatype: yesnowide
    show if: 
      code: |
        device() and device().is_pc
  - label: Cell phone number
    field: link_cell
    show if: text_link
    default: ${showifdef('client.phone_number')}
  - note: |
      Click ${word("continue")} to add your signature.
  - note: |
      Click ${word("continue")} to add your signature.
    show if: 
      code: |
        device() and not device().is_pc
help: |
  Many smartphones will automatically find the link on this screen when you use
  the camera app. The link
  may "float" up from the screen into a small icon you can click.
  If your phone does not do this, use the text option instead.
continue button field: saw_signature_qrcode
---
code: |
  has_sellable_assets = vehicles.there_are_any or real_estate.there_are_any
---
code: |
  if recordee.name.full() == client.name.full() and payment_type['SSI']:
    we_think_recordee_is_client = True
    receives_benefits = True
    receives_benefits_type_options = 'SSI'
    receives_benefits_type = 'SSI'
    #receives_ssi = True
    #received_ssi = False
  else:
    we_think_recordee_is_client = False
  evaluate_if_receives_benefits = True
---
id: intro
question: |
  Overpayment Waiver or Change in Repayment Rate
subquestion: |
  If Social Security says you owe them money, this website can help you ask Social Security to: 
  
  1. **waive an overypayment**, meaning that you don’t have to pay the money back, or
  1. **lower the repayment rate**, meaning that you have to pay less back to Social    Security every month
   
  [Understanding SSI Overpayments](https://www.ssa.gov/ssi/text-overpay-ussi.htm)

  [What can I do if I have an Overpayment Notice?](https://www.ssa.gov/faqs/en/questions/KA-02345.html)
  
  <div class="alert alert-warning" role="alert">
  :info-circle:  
  <b>Use this website if you agree that you owe Social Security</b>. 
  If you do not agree, you should file an 
  <a href="https://secure.ssa.gov/iApplNMD/start">appeal</a>.
  </div>
  
  ${ collapse_template(appeal_help_template) }
  
  ${ collapse_template(who_needs_to_fill_this_out) }
  
  <h2 class="h4">Before you start you should find:</h2>
  
  1. The notice from Social Security that says that you owe money.
  2. Information about the money that you get each month, and the money that
  people who live with you get.
  3. Find out if you get SSI, SSDI, or both. 
  4. Information about how you save and spend money, such as bank statements
  and bills.

  If you are unsure whether you receive SSI, SSDI, or both you can call Social         Security at ${tel("1-855-807-8807") } or check the [Social Security                  website](https://www.ssa.gov/myaccount/)
  
fields: 
  - To continue you must accept the [terms of use](https://vlpnet.org/tos-for-guided-interviews/): intro_screen
    datatype: checkboxes
    minlength: 1
    validation messages:
      minlength: |
        You must accept the terms of use to continue.
    choices:
      - I accept the terms of use: i_accept
under: |
  _This website is not giving you legal advice. If you need legal advice, consult a lawyer._
help:
  label: |
    How do you keep my information safe?
  content: |    
    All information sent to and from this server is encrypted, using the same
    technology and strength that keeps your bank information safe.
    
    If you create an account on our system, your responses
    will be encrypted on our server at all times.
    Only someone with your password will be able to view the contents of your
    interview. 
    
    It's important to both keep your password
    secure and not to lose it, because we will not be able
    to retrieve your interview without it.
---
template: overpayment_waiver_help_template
subject: |
  More information about an overpayment waiver
content: |
  When Social Security says that you have an overpayment they are saying that you got more SSI or SSDI than you should have gotten under their rules. The reason Social Security says you have an overpayment is in the Notice of Overpayment. 
  
  If you agree with Social Security that you have an overpayment but you believe it wasn’t your fault and you can’t afford to pay it back you can ask Social Security for a Waiver. A Waiver means that you don’t have to pay back the overpayment. This interview is to help you fill out a form to ask for a Waiver of the overpayment.
---
template: appeal_help_template
subject: |
  More information about appeals
content: |
  If you do NOT agree with Social Security that you have an overpayment or if you do not understand the reasons Social Security said you have an overpayment, you can file an appeal of the overpayment. The appeal is called a Request for Reconsideration.  
  
  The deadline for filing the appeal is 60 days from the date you got your overpayment notice from Social Security. You must act quickly if you want to appeal. 
  
  If you got an overpayment notice after going back to work while you were on SSI or SSDI, you may be able to get legal advice from the Disability Law Center. Call them at ${tel("617-723-8455") } or ${ tel("1-800-872-9992") }. They may be able to help you decide if you should file an appeal or a waiver. 
  
  You can [start your appeal online](https://secure.ssa.gov/iApplNMD/start) or by filling out the [Request for Reconsideration form](https://www.ssa.gov/forms/ssa-561-u2.pdf) and sending it to your [local Social Security office](https://www.ssa.gov/open/data/FO-RS-Address-Open-Close-Time-App-Devs.html).

  Learn more:
  
  * [https://www.illinoislegalaid.org/legal-information/ssi-and-ssdi-overpayments-and-appeals](https://www.illinoislegalaid.org/legal-information/ssi-and-ssdi-overpayments-and-appeals)
  * [https://www.masslegalservices.org/content/ssi-overpayment-booklet](https://www.masslegalservices.org/content/ssi-overpayment-booklet)
  * [https://www.masslegalservices.org/content/ssdi-overpayment-booklet](https://www.masslegalservices.org/content/ssdi-overpayment-booklet)

---
id: who is overpaid
question: |
  Who does Social Security say had an overpayment?
subquestion:
  Whose account is the overpayment on?
  Look at the letter about the overpayment that you got from Social Security.
  Look for a Social Security or Claim Number on the letter. Write down the 
  name 
  of the person who has that
  Social Security number.
fields:
  - First name: recordee.name.first
  - Middle name: recordee.name.middle
    required: False
  - Last name: recordee.name.last
---
code: |
  if client_is_overpaid_person:
    recordee = client
---
code: |
  if recordee == client:
    client_is_rep_payee = False
---
code: |
  if not isinstance(expenses, DAEmpty): 
    expenses_exceed_income = expenses.total() > (client.incomes.total() + spouse.incomes.total() + household.incomes.total())
  else:
    expenses_exceed_income = False  
---
id: agree overpaid
question: |
  % if client_is_overpaid_person:
  Do you agree that you got too much money from Social Security?
  % else:
  Do you agree that ${recordee} got too much money from Social Security?
  % endif
subquestion: |
  Choose the answer that best matches what you understand about what happened.

  If you __do not agree__ that ${recordee} __was__ overpaid, you should file an 
  [appeal](https://secure.ssa.gov/iApplNMD/start)
  
  If you __agree__ that ${recordee} was overpaid, __you are agreeing to repay that amount__, but you can still request a waiver or to lower the repayment rate by completing this interview.
field: agree_overpaid
choices:
  - ${ disagree_overpaid_template }: False
  - ${ agree_overpaid_template }: True
---
template: disagree_overpaid_template
content: |
  % if client_is_overpaid_person:
  I disagree that I got too much money. I think I was paid the right amount.
  % else:
  I disagree that ${recordee} got too much money. I think ${recordee} was paid the right amount.
  % endif
---
template: agree_overpaid_template
content: |
  % if client_is_overpaid_person:
  I agree I was paid too much, even if it was an accident.
  % else:
  I agree ${recordee} was paid too much, even if it was an accident.
  % endif

---
id: objective
question: |
  What are you asking the Social Security Administration to let you do?
field: client_goals
choices:
  - "**Waive an overpayment**, meaning that you don't have to pay the money back": waive_overpayment
  - "**Lower the repayment rate**, meaning that you have to pay less back every month": reduce_overpayment
---
code: |
  only_change_monthly_due = client_goals == 'reduce_overpayment'
---
comment: |
  Not sure we will leave this in--somewhat in the nature
  of debugging for now. But could be useful for transparency.
id: explain ssa 634
question: |
  We'll complete form SSA-634 for you
subquestion: |
  You said you only are asking the Social Security Administration
  to change the amount you pay each month. That means we only need
  to complete form SSA-634.
  
  Form SSA-634 is a little simpler and asks fewer questions.
  
  Below is what the first page of form SSA-634 looks like. 
  
  ${ SSA_634.show(width='28em') }
    
continue button field: explain_ssa_634  
---
id: explain ssa 632
question: |
  We'll complete form SSA-632 for you
subquestion: |
  % if not len(client_goals.true_values()):
  You said you aren't sure yet what you want the Social Security Administration
  to do. That means we'll need to complete form SSA-632.
  % else:
  You said you would like the Social Security Administration to change the
  total amount you will pay back. That means we'll complete form SSA-632.
  % endif
  
  Below is what the first page of form SSA-632 looks like.
  
  ${ SSA_632.show(width='28em') }
continue button field: explain_ssa_632
---
objects:
  - SSA_634: DAStaticFile.using(filename='SSA_634.png', alt_text='SSA-634')
  - SSA_632: DAStaticFile.using(filename='SSA_632.png', alt_text='SSA-632')
---
id: exit dont agree overpaid
decoration: hand-paper
question: |
  This may not be the right form for you.
subquestion: |
  This form is used when you want the Social Security Administration to waive or reduce the amount you owe them.
  
  If you don’t agree with the Social Security Administration that an overpayment happened or you’re not sure, you may want to [appeal the overpayment](https://secure.ssa.gov/iApplNMD/start) instead. But you must act quickly because there are time limits for filing an appeal. You can [start your appeal](https://secure.ssa.gov/iApplNMD/start) on Social Security's website.
  
  If you appeal you can also ask for a waiver now or at any time later. If you want to save your work on the waiver request, you’ll need to create an account.
  
  It’s a good idea to talk to a lawyer if you want to appeal. If you live in Massachusetts, visit the [Legal Resource Finder](https://masslrf.org) to find legal help. For help finding legal aid in other states, visit the [Legal Services Corporation](https://www.lsc.gov/what-legal-aid/find-legal-aid).
  
  If you received the Notice of Overpayment more than 65 days ago, it may be too late for you to file an appeal unless you had a good reason for missing the deadline. 

  If it is too late for you to file an appeal and you don’t agree that an overpayment happened, click “Keep going” to finish the request for a waiver.
buttons:
  - Keep going:
      code: |
        continue_anyway = True  
  - Exit and file an appeal: exit
    url: https://secure.ssa.gov/iApplNMD/start
  - Exit: exit
---
id: is rep payee
question: |
  Are you ${recordee}'s representative payee?
subquestion: |
  You said the overpayment was on ${recordee}'s account.
  At the time the Social Security Admininistration says you 
  were overpaid, were you a  
  representative payee for ${recordee}?
yesno: client_is_rep_payee
---
id: overpayment info
question: |
  Did you have any control over the overpayment?
fields:
  - Did the Social Security Administration tell you that you were responsible for the overpayment?: ssa_told_client_must_pay_for_someone_else
    datatype: yesnoradio
  - Did you live with ${recordee} when the overpayment happened?: someone_else_lived_with_user
    datatype: yesnoradio    
  - Do you live with ${ recordee } right now?: client_lives_with_overpaid_person
    datatype: yesnoradio
  - Is ${ recordee } under 18 now?: waiver_for_minor_child
    datatype: yesnoradio
  - Did you get any of the overpaid money?:   someone_else_user_received_benefits
    datatype: yesnoradio
  - Did you use the money for ${ recordee }?: money_used_for_beneficiary
    datatype: yesnoradio
    show if: someone_else_user_received_benefits
---
id: your situation
question: |
  % if client_is_overpaid_person:
  When the overpayment happened, were you:
  % else:
  When the overpayment happened, was ${ recordee }:
  % endif
subquestion: |
  ()
fields:
  - label: |
      % if client_is_overpaid_person:
      Select any that applied when you got the overpayment
      % else:
      Select any that applied to ${ recordee.familiar() } when they got the overpayment
      % endif
    field: situation_at_overpayment
    datatype: checkboxes
    choices:
      - under the age of 18: situation_client_minor_when_received
      - over the age of 18: situation_client_adult_when_received
      - getting disability benefits: situation_client_getting_disability_benefits_when_overpaid
      - getting retirement benefits: situation_client_getting_retirement_benefits_when_overpaid
      - getting benefits on a parent's record: situation_client_getting_parent_benefits_when_overpaid
      - getting benefits from a spouse who passed away: situation_client_getting_widow_benefits_when_overpaid
      - getting benefits from a spouse: situation_client_getting_spousal_benefits_when_overpaid
      - getting Supplemental Security Income (SSI) benefits: situation_client_getting_ssi_benefits_when_overpaid
  - Explain: situation_none_of_above_explain
    maxlength: 50
    show if:
      variable: situation_at_overpayment
      is: None
      # TODO: this doesn't work, might need to replace w/ js show if      
---
id: how benefits used
question: |
  What did you spend the overpaid benefits on?
fields:
  - no label: overpayment_benefits_used_for
    datatype: area
    maxlength: 86
---
id: social security number
generic object: Individual
question: |
  Social Security Number for ${x}
subquestion: |
  What is ${x}'s Social Security Number?
fields:
  - SSN: x.ssn
    validate: is_valid_ssn
    datatype: ssn  
under: |
  {Why} do we need this?
terms:
  - Why: |
      The Social Security Administration needs this number in order to 
      apply this overpayment waiver request to the right account.
---
id: claim number
generic object: Individual
question: |
  Claim number
subquestion: |
  If ${x} has a claim number that is different from their Social Security
  number, enter it below.
fields:
  - Claim number: x.claim_number
    required: False
---
id: have overpaid money
question: |
  Do you currently have any of the money you were overpaid? 
fields:
  - no label: possess_overpayment
    datatype: yesnoradio
  - How much do you still have?: possess_overpayment_amount
    show if: possess_overpayment
    datatype: currency
    min: 1
    step: 1
---
id: pay ssa explanation
question: |
  You will need to pay the Social Security Administration back
subquestion: |
  The Social Security administration will ask you to pay back the ${currency(possess_overpayment_amount, decimals=False)}
  that you said you still have from the overpayment. If that is less than the full 
  amount of the overpayment you may still need to pay back more, but you can ask for a 
  payment plan that works for you.
field: pay_ssa_explanation
---
id: had overpaid money
question: |
  What happened to the overpaid checks or money?
subquestion: |
  You said you no longer have any of the money you were overpaid.
fields: 
  - When you got the overpayment notice, did you have any of the money you were overpaid?: possessed_overpayment_at_notice
    datatype: yesnoradio
  - How much did you have then?: possessed_overpayment_at_notice_amount
    datatype: currency
    step: 1
    show if: possessed_overpayment_at_notice
    
---
id: receives benefits
question: |
  Are you currently receiving any needs-based cash benefits?
subquestion: |
  Answer yes if you personally receive cash welfare benefits, SSI, or a state cash 
  benefit that is based on your need.
field:  receives_benefits  
choices:
  - Yes: True
  - No: False
help: |
  If you are receiving SSI or another benefit based on your need, you do not need
  to give the Social Security Administration as much information about your finances.
---
id: benefits kind
question: |
  What kind of cash benefits are you receiving?
fields: 
  - no label: receives_benefits_type_options
    datatype: checkboxes
    choices:
      - SSI: SSI
      - EAEDC: EAEDC
      - TAFDC (Temporary Aid to Families with Dependent Children): TAFDC
      - VA Benefits: VA
      - Other: other
    none of the above: False      
  - Name of benefits program: receives_benefits_other
    show if: receives_benefits_type_options['other']
  - What is the account or claim number for your benefits?: receives_benefits_claim_number

---
code: |
  if receives_benefits_type_options['SSI'] or receives_benefits_type_options['TAFDC'] or receives_benefits_type_options['EAEDC']:
    receives_benefits_type = receives_benefits_type_options.true_values()
  else:
    receives_benefits_type = receives_benefits_other
---
id: dont need financial statement explanation
question: |
  You don't need to give us your financial information
subquestion: |
  Because you are receiving ${receives_benefits_type}, you don't need to answer the
  financial questions on this form. We'll finish asking for your contact information
  and signature on the next few pages.
field: dont_need_financials_explanation
---
id: do need financial statement explanation
question: |
  We will need to collect your financial information
subquestion: |
  In the next section, we will need to ask detailed information about how you,
  your spouse, and any household members earn money, as well as your household
  expenses. You will need to list any money you or a household member earns from 
  any source, including things like odd jobs, interest on bank accounts, and           informal payments for household expenses.
  
  Take a minute to make sure you have any pay stubs, tax returns or receipts for
  self-employment income, bank statements, and any monthly bills you pay.
  
  % if user_logged_in():
  If you don't have information about all your expenses or if you need a break, your work has been saved and you can come back later to finish the interview.
  % else:
  If you don't have information about all your expenses or if you need a break, you can save your work and come back later to finish the interview by creating an account.
  
  ${ action_button_html(url_of('register'), label="Create an account") }
  
  % endif
field: need_financials_explanation  
---
id: cash on hand
question: |
  Cash on hand
fields:
  - How much money do you, your spouse, or anybody who depends on you have available as cash on hand?: cash_amount
    datatype: currency   
---
id: ssa payment type
question: |
  % if not client_is_overpaid_person:
  What kind of Social Security payments does ${recordee} get?
  % else:
  What kind of Social Security payments do you get?
  % endif
fields:
  - no label: payment_type
    datatype: checkboxes
    choices:
      - Supplemental Security Income (SSI): SSI
      - Social Security Disability (SSDI): SSDI
      - Social Security Retirement benefits: SSR
    none of the above: |
      ${recordee} no longer receives any money from Social Security
---
id: actions after overpayment notice
question: |
  What happened after you got the overpayment notice from Social Security?
subquestion: |
  % if not client_is_overpaid_person:
  Think about what happened after Social Security told you that ${recordee} got
  too much money.
  % endif
fields:  
  - Did you give away any money after the notice of overpayment?: gave_cash_after_notice
    datatype: yesnoradio
  - How much money?: gave_away_cash_amount
    datatype: currency
    show if: gave_cash_after_notice
  - Did you get any cash, (other than money you got from working), after the notice of overpayment?: received_cash_after_notice
    datatype: yesnoradio
  - How much cash did you get?: got_cash_amount
    datatype: currency
    show if: received_cash_after_notice
  - Did you sell any real estate after the notice of overpayment?: sold_real_estate
    datatype: yesnoradio
  - How much was it worth?: sold_real_estate_amount
    help: |
      Enter a dollar amount, or put your best estimate.
    maxlength: 20    
    show if: sold_real_estate
  - Did you give away any real estate after the notice of overpayment?: gave_away_real_estate
    datatype: yesnoradio
  - How much was it worth?: gave_away_real_estate_amount
    help: |
      Enter a dollar amount, or put your best estimate.
    maxlength: 20
    show if: gave_away_real_estate
  - Did you get any real estate after the notice of overpayment?: received_real_estate
    datatype: yesnoradio
  - How much was it worth?: received_real_estate_amount
    help: |
      Enter a dollar amount, or put your best estimate.
    maxlength: 20
    show if: received_real_estate
---
id: why cant return overpayment
question: |
  Why can't you return the overpayment any more?
subquestion: |
  You said that when you got the notice, you still had 
  ${ currency(possessed_overpayment_at_notice_amount, decimals=False) } from the overpayment.
  Using your own words, explain to the Social Security Administration 
  why you do not think you should have to return the ${ currency(possessed_overpayment_at_notice_amount, decimals=False) }
  anymore.
fields:
  - no label: cant_return_explanation
    datatype: area
    maxlength: 273
---
id: expenses higher than income
question: |
  Your expenses are higher than your income
subquestion: |
  From the information you gave us, your monthly expenses
  are higher than your income. Explain how you are paying your bills
  below.
fields:
  - no label: expenses_exceed_income_explanation
    datatype: area
    maxlength: 290
---
id: ability to pay
question: |
  Why are you asking for a waiver?
subquestion: |
  Check any of the below that apply
fields:
  - no label: overpayment_pay_less_reasons
    datatype: checkboxes
    choices:
      - I cannot afford to pay back the money: cannot_afford
      - The overpayment was not my fault: not_my_fault
      - Requiring me to pay back the overpayment is unfair: unfair
      - I thought I still had a disability that would make me eligible for benefits. I filed an appeal and I fully cooperated with Social Security.: thought_disabled
      - I was age 18 and receiving SSI when the overpayment occurred.: 18_with_ssi
      - Other: other
    none of the above: False
  - Why is it unfair to ask you to pay back the overpayment?: overpayment_why_unfair
    datatype: area
    show if: overpayment_pay_less_reasons['unfair']
    #maxlength: 70
  - Other reason: overpayment_other_reason_explain
    show if: overpayment_pay_less_reasons['other']
---
code: |
  overpayment_not_my_fault = overpayment_pay_less_reasons['not_my_fault']
  overpayment_cant_afford = overpayment_pay_less_reasons['cannot_afford']
---
id: amount can pay
question: |
  Are you asking the Social Security Administration to waive the entire amount you owe?
field: cant_pay_at_all
choices:
  - Yes: True
  - No: False
---
id: overpayment_waiver_second_request
question: |
  Have you ever asked the Social Security Administration to waive this overpayment before?
fields:
  - no label: overpayment_waiver_second_request
    datatype: yesnoradio
---
#id: ssi payment status
#question: |
#  SSI Payments
#fields:
#  - Were you receiving SSI payments in the past?: received_ssi
#    datatype: yesnoradio
#  - Are you receiving SSI payments right now?: receives_ssi
#    datatype: yesnoradio
---
id: overpayment reason
question: |
  What is the reason for the overpayment?
subquestion: |
  Look at the letter the Social Security Administration sent you.
  What reason is the best match for why the Social Security Administration
  says you were overpaid?
fields:
  - no label: overpayment_reason
    input type: radio
    code: |
      overpayment_reason_choices
  - What was the reason?: overpayment_reason_other_explain
    show if: 
      variable: overpayment_reason
      is: 'something_else'
---
variable name: overpayment_reason_choices
data:
  - worked_many_hours: |
      % if not client_is_overpaid_person:
      ${recordee} went back to work and made too much money
      % else:
      I got too much money from working
      % endif
  - household_too_much_income: |
      % if not client_is_overpaid_person:
      Someone in ${recordee}'s household made too much money
      % else:
      Someone in my household made too much money
      % endif      
  - money_in_bank: |
      % if not client_is_overpaid_person:
      ${recordee} had too much money in a bank account
      % else:
      I had too much money in my bank account
      % endif
  - help_food_shelter: |
      % if not client_is_overpaid_person:
      ${ recordee } got help for food and shelter
      % else:
      I got help for food and shelter
      % endif
  - double_payment: |
      % if not client_is_overpaid_person:
      Social Security paid ${ recordee } more than once in the same month
      % else:
      Social Security paid me more than once in the same month
      % endif
  - not_disabled: |
      % if not client_is_overpaid_person:
      Social Security says that ${ recordee } is not disabled any more
      % else:
      Social Security says that I am not disabled any more
      % endif
  - marriage_divorce: |
      % if not client_is_overpaid_person:
      ${ recordee } got married or divorced
      % else:
      I got married or divorced
      % endif
  - workers_comp: |
      % if not client_is_overpaid_person:
      ${ recordee } got worker's compensation
      % else:
      I got worker's compensation
      % endif
  - nursing_home: |
      % if not client_is_overpaid_person:
      ${ recordee} was in a nursing home
      % else:
      I was in a nursing home
      % endif
  - jail_prison: |
      % if not client_is_overpaid_person:
      ${ recordee } was in jail or prison
      % else:
      I was in jail or prison
      % endif
  - out_of_country: |
      % if not client_is_overpaid_person:
      ${recordee} went out of the country for more than 30 days
      % else:
      I went out of the country for more than 30 days
      % endif
  - immigration_status: |
      % if not client_is_overpaid_person:
      ${ recordee }'s immigration status changed
      % else:
      My immigration status changed
      % endif
  - other_entitlee: |
      % if not client_is_overpaid_person:
      Someone else got entitled on ${ recordee }'s same record
      % else:
      Someone else got entitled on my same record
      % endif
  - attorney_fee: |
      % if not client_is_overpaid_person:
      ${ recordee }'s attorney got paid for getting their SSI award but 
      it was not taken out of ${ recordee.familiar() }'s benefits
      % else:
      My attorney got paid for getting my SSI award but 
      it was not taken out of my benefits
      % endif      
  - not_student: |
      % if not client_is_overpaid_person:
      ${ recordee } was no longer a student
      % else:
      I was no longer a student
      % endif
  - no_child: |
      % if not client_is_overpaid_person:
      ${ recordee } did not have a child under 16 or a disabled child any more
      % else:
      I did not have a child under 16 or a disabled child any more
      % endif     
  - something_else: Something else
  - dont_know: I don't know
---
id: understanding of rules
question: |
  Did you understand that you have to tell the Social Security
  Administration when your situation changes?
subquestion: |
  The Social Security Administration asks you to tell them when:
  
  - you start or stop working
  - you get married
  - you get divorced
  - you move
  - your income changes
  - your resources change
  - you start or stop going to school
  - any other change affects your benefits
  
fields:
  - Did you understand the rules listed above?: client_understands_reporting_rules
    datatype: yesnoradio
  - Why not?: client_understands_reporting_rules_no_explain
    datatype: area
    maxlength: 160
    show if: 
      variable: client_understands_reporting_rules
      is: False
---
id: client was able to report changes
question: |
  Did something stop you from being able to report changes to the Social Security Administration?
fields: 
  - no label: client_prevented_from_reporting_other
    datatype: yesno
    input type: radio
    choices:
      - Yes: True
      - No. I was able to report changes.: False
  - Explain: why_cant_report_to_ssa
    show if: client_prevented_from_reporting_other
    datatype: area
    rows: 2
    maxlength: 160
---
# if: |
#   payment_type['other'] and not payment_type['SSI']
# variable name: overpayment_reason_choices
# data:
#   - out_of_country: |
#       % if not client_is_overpaid_person:
#       ${recordee} went out of the country for more than 30 days
#       % else:
#       I went out of the coutnry for more than 30 days
#       % endif
#   - something_else: Something else
#   - dont_know: I don't know
# ---
# if: |
#   payment_type['SSI']
# variable name: overpayment_reason_choices
# data:
#   - money_in_bank: |
#       % if not client_is_overpaid_person:
#       ${recordee} had too much money in a bank account
#       % else:
#       I had too much money in my bank account
#       % endif
#   - worked_many_hours: |
#       % if not client_is_overpaid_person:
#       ${recordee} went back to work and made too much money
#       % else:
#       I got too much money from working
#       % endif
#   - out_of_country: |
#       % if not client_is_overpaid_person:  
#       ${recordee} went out of the country for more than 30 days
#       % else:
#       I left the country for more than 30 days
#       % endif
#   - something_else: Something else
#   - dont_know: I don't know
---
#id: overpayment explanation
#question: |
#  Why did the overpayment happen?
#fields:
#  - Explain how the overpayment happened.: overpayment_explanation
#    datatype: area
#    maxlength: 435
---
depends on:
  - overpayment_reason
code: |
  overpayment_reason_plain_text = next(filter(lambda reason: next(iter(reason),'') == overpayment_reason, overpayment_reason_choices),{}).get(overpayment_reason)
---
#id: overpayment fault
#question: |
#  Why was the overpayment not your fault?
#subquestion: |
#  % if overpayment_reason == 'dont_know' or overpayment_reason == 'something_else':
#  Explain why the overpayment wasn't your fault.
#  Answer "I don't know" if that is the best answer.
#  You can type a total of 460 characters in the spaces provided.
#  % else:
#  You said that the Social Security Administration believes the overpayment happened because ${overpayment_reason_plain_text}.
#  Explain why the overpayment wasn't your fault. 
#  Answer "I don't know" if that is the best answer.
#  You can type a total of 460 characters in the spaces provided.
#  % endif
#fields:
#  - Why was the overpayment not your fault?: overpayment_why_not_at_fault
#    datatype: area
#  - Why is it not your fault that you accepted the overpayment?: overpayment_why_accepted
#    datatype: area
#  - Why did you think you had a right to the money?: overpayment_why_had_right
#    datatype: area
#validation code: |
#  if len(overpayment_why_not_at_fault) + len(overpayment_why_accepted) + len(overpayment_why_had_right) > 460: validation_error("It's too long.")
---
id: ssa contact
question: |
  Contact with Social Security Administration
subquestion: |
  % if not (overpayment_reason == 'dont_know' or overpayment_reason == 'something_else'):
  You said: "${overpayment_reason_plain_text}."
  % endif
fields:
  - label: |
      Did you tell the Social Security Administration about the change or event that made you overpaid?
    field: informed_ssa
    datatype: yesnoradio
  - Why not?: did_not_inform_ssa_explanation
    datatype: area
    maxlength: 285
    show if:
      variable: informed_ssa
      is: False          
  - When? List any dates: told_ssa_dates
    maxlength: 80
    show if: informed_ssa
  - How?: told_ssa_how
    show if: informed_ssa
    datatype: checkboxes
    choices:
      - Phone: phone
      - Fax: fax
      - Letter: letter
      - In person, at a local office: office
      - Electronic wage reporting: wage_reporting
      - Other: other
  - Explain how and where: how_when_where
    datatype: area
    maxlength: 344
    show if: told_ssa_how['other']
  - Do you have any copies of letters or other proof that you told the Social Security Administration about the change?: told_ssa_documentation
    datatype: yesnoradio
  - note: |
      **Okay**. Please send a copy with this letter when
      you deliver it to the SSA.
    show if: told_ssa_documentation
  - Why not?: told_ssa_documentation_explain_why_cant_send
    datatype: area
    rows: 2
    maxlength: 160
    show if:
      variable: told_ssa_documentation
      is: False
---
id: ssa contact followup
question: |
  Follow-up
subquestion: |
  % if overpayment_reason == 'dont_know' or overpayment_reason == 'something_else':
  You said that you contacted the Social Security Administration to let them know that you were overpaid.
  % else:
  You said that you contacted the Social Security Administration about the reason that you
  were overpaid.
  % endif
fields:
  - label: |
      % if overpayment_reason == 'dont_know' or overpayment_reason == 'something_else':
      After you reported the overpayment, did the Social Security Administration change your benefits amount?
      % else:
      After you told Social Security "${overpayment_reason_plain_text}," did the Social Security Administration change your benefits amount?
      % endif
    field: benefits_changed_after_contact
    datatype: yesnoradio
  - Did you try to let the Social Security Administration know about the overpayment more than once?: benefits_did_not_change_followed_up
    datatype: yesnoradio
    show if:  
      variable: benefits_changed_after_contact
      is: False
---
id: past overpayments
question: |
  Past overpayments
fields:
  - Has Social Security ever said you have been overpaid before?: first_overpayment
    datatype: noyesmaybe
    # Leaving this logic inverted to reduce scope of wording change
  - Why were you overpaid in the past?: past_overpayment_explanation
    datatype: area
    maxlength: 125
    show if:
      variable: first_overpayment
      is: False
  - Is the reason similar to the reason you were overpaid the first time?: overpaid_before_same_reason
    datatype: yesnoradio
    show if:
      variable: first_overpayment
      is: False
---
code: |
  if assets.there_are_any:
    cash_assets = [asset for asset in assets if asset.type in ['savings','checking']]
    #cash_assets = []
    non_cash_assets = [asset for asset in assets.elements if asset.type not in ['savings','checking']]
  else:
    cash_assets = []
    non_cash_assets = []
  fixed_assets = vehicles.elements + real_estate.elements
---
id: unable to sell assets
question: |
  Is there any reason you cannot sell the assets you told us about?
fields:
  - no label: assets_cannot_be_sold
    datatype: yesnoradio
  - Why?: assets_cannot_be_sold_explanation
    datatype: area
    show if: assets_cannot_be_sold
    maxlength: 174
---
id: contact information
generic object: Individual
question: |
  ${x}'s Contact Information
fields:
  - Home or cell phone number: x.phone_number
  - Work phone number: x.phone_work
    required: False
  - Address: x.address.address
    address autocomplete: True
  - Unit or Apt: x.address.unit
    required: False
  - City: x.address.city
  - State: x.address.state
    code: |
      states_list()
  - Zip code: x.address.zip
    required: False
---
id: income remarks
question: |
  Do you want to tell Social Security anything else about your income and assets?
fields:
  - no label: income_remarks
    datatype: area
    rows: 3
    maxlength: 560
    required: False
---
id: expense remarks
question: |
  Do you want to tell Social Security anything else about your expenses?
fields:
  - no label: expense_remarks
    datatype: area
    rows: 3
    maxlength: 880
    required: False
---
id: which office
question: |
  What Social Security office do you want to send the letter to?
subquestion: |
  % if found_offices:
  We have found the following offices that are close to your address.
  
  ${map_of([office for office in officelist])}

  If there is more than one result, you should choose the office that serves your city
  or town.
  Use the [Office locator](https://secure.ssa.gov/ICON/main.jsp) to find the
  SSA office that serves your city.
  % else:
  You can use the [Office locator](https://secure.ssa.gov/ICON/main.jsp) to find
  the Social Security Office that serves your city or town.
  % endif
fields:
  - Social Security Office: ssa_office
    datatype: object_radio
    # input type: radio
    choices: officelist
    none of the above: True
    disable others: True
    object labeler: |
      lambda y: (y.address.on_one_line(show_country=False))
  - note: |
      Choose an office above, or use the [Office locator](https://secure.ssa.gov/ICON/main.jsp)
    show if: found_offices
  - Address: ssa_office.address.address
  - Suite: ssa_office.address.unit
    required: False
  - City: ssa_office.address.city
  - State: ssa_office.address.state
    code: |
      states_list()
---
code: |
  officelist.load_offices(client.address)
  officelist.gathered = True
---
code: |
  found_offices = officelist.number() > 0
---
id: signature method
decoration: file-signature
question: |
  Sign your forms
subquestion: |
  We are almost ready to print your forms. You will need to sign them before
  delivering them. We recommend you sign electronically now, before you print. 
  You can sign using your computer mouse, or sign on your phone with your finger.
    
field: signature_choice
buttons:  
  - Sign on a mobile phone: phone
    image: mobile-alt
  - Sign on this computer: this device
    image: desktop
  - Sign after I print: paper
    image: print
script: |
  <script>
    $(document).on('daPageLoad', function(){
      $(".da-field-buttons > div > .btn-da-custom").last().after("<br>")
      $(".da-field-buttons > div > .btn-da-custom").first().before("<br>")
    });
  </script>
continue button field: saw_signature_choice  
---
id: sign on phone
question: Sign on your phone
subquestion: |
  % if device().is_pc:
  Click continue on this screen once you have finished signing on your phone.
  % else:
  Click continue on this screen when you're ready to sign.
  % endif
  
field: signature_wait_screen  
---
template: interview_link
content: |
  You are being asked to sign a Request for SSI Overpayment Waiver form.
  Click the link below to add your signature on your phone.
  
  ${interview_url()}
---
id: signature
question: Sign below
subquestion: |
signature: client.signature
under: |
  ${ client }
---
code: |
  client_support = client.incomes.total(type='other support') > 0 if not isinstance(client.incomes, DAEmpty) else []
  spouse_support = spouse.incomes.total(type='other support') > 0 if not isinstance(spouse.incomes, DAEmpty) else []
  household_support = household.incomes.total(type='other support') > 0 if not isinstance(household.incomes, DAEmpty) else []
    
  support_from_loan = any([income for income in client.incomes + spouse.incomes + household.incomes if hasattr(income, 'support_from_loan') and income.support_from_loan])    
    
  receives_support = client_support or spouse_support or household_support
  all_incomes = client.incomes + spouse.incomes + household.incomes
  
  if receives_support:
    support_sources = [income.name for income in all_incomes if income.type == 'other support']
  else:
    support_sources = []
    
---
code: |
  client_pensions = client.incomes.matches('pension')
  spouse_pensions = spouse.incomes.matches('pension')
  household_pensions = household.incomes.matches('pension')
---
code: |
  savings = assets.matches('savings')
---
code: |
  grand_total = (client.incomes.total(period_to_use=12) +
                  spouse.incomes.total(period_to_use=12) + 
                  household.incomes.total(period_to_use=12) +
                  client.jobs.net_total(period_to_use=12) +
                  spouse.jobs.net_total(period_to_use=12) +
                  household.jobs.net_total(period_to_use=12) +
                  assets.total(period_to_use=12) 
                  )

  monthly_expenses = expenses.total()

  adjusted_expenses = monthly_expenses + 55 # See Question 20C
---
code: |
  room_and_board_explanation = comma_and_list([item.room_and_board_explanation for item in all_incomes if item.type == "room and board"])     
---
code: |
  asset_other_description = comma_and_list([item.other_type for item in assets if item.type == "other"])
---
code: |
  expense_support_details = comma_and_list([item.support_explanation for item in expenses if item.type == "support"])
---
id: authorize ssa to review accounts
question: |
  Do you give permission to the Social Security Administration
  to get your bank records?
subquestion: |
  Read the statement below. If you agree, click the checkbox
  to accept and continue.

    "I authorize any custodian of records at any financial institution to disclose        to the Social Security Administration any records about my financial business        or that of the person named above whom I legally represent or whose benefits I       manage."

  <div class="panel panel-primary">
    <div class="panel-heading">
      <h3 class="panel-title">I understand:</h3>
    </div>
    <div class="panel-body scrollable-panel">
    <ul>
    <li>I have the right to revoke this authorization at any time before any records are disclosed;</li>
    <li>The Social Security Administration may request all records about me from any financial institution;</li>
    <li>Any information obtained will be kept confidential;</li>
    <li>I have the right to obtain a copy of the record which the financial institution keeps concerning the</li>
    <li>instances when it has disclosed records to a government authority unless the records were disclosed</li>
    <li>because of a court order;</li>
    <li>This authorization is not required as a condition of doing business with any financial institution.</li>
    <li>The Social Security Administration will request records to determine the ability to repay an</li>
    <li>overpayment in conjunction with a waiver determination;</li>
    <li>Failing to provide or revoking my authorization may result in the Social Security Administration</li>
    <li>determining, on that basis, that adjustment or recovery of the overpayment will not deprive me of</li>
    <li>funds to pay my bills for food, clothing, housing, medical care, or other necessary expenses;</li>
    <li>This authorization is in effect until the earliest of: 1) a final decision on whether adjustment or</li>
    <li>recovery of my overpayment would deprive me of funds to pay my bills for food, clothing, housing,</li>
    <li>medical care, or other necessary expenses; or 2) my revocation of this authorization in written</li>
    <li>notification to the Social Security Administration.    </li>
    </ul>
    </div>
  </div>
  
  
  If you do not agree to let the Social Security Administration
  to get your bank records, the Social Security Administration
  may not give you a waiver of the overpayment.
field: authorize_disclosure_to_ssa
choices:
  - I authorize the Social Security Admininistration to get my bank records: True
  - I do not authorize the Social Security Administration to get my bank records: False
css: |
  <style>
    .scrollable-panel{
      height:300px;
      overflow-y:scroll;
      width:100%;
      }  
  </style>
---
id: final remarks
question: |
  Is there anything else you want to tell Social Security?
subquestion: |
  You can use this space to write anything else about the overpayment that you 
  did not already say or that did not fit.
fields:
  - no label: other_remarks
    rows: 5
    maxlength: 2400
    required: False
    datatype: area
---
id: preview pdf
continue button field: preview_pdf
question: |
  Review your form before you Download it
subquestion: |
  ### Here is a preview of your form:
  
  Click to see your answers 
  
  ${ ssa_634_template['preview'] if only_change_monthly_due else ssa_632_template['preview'] }
  
  ### When you submit this form you are saying the following: 
  
  "I declare under penalty of perjury that I have examined all the information on       this form, and on any accompanying statements or forms, and it is true and           correct to the best of my knowledge. I understand that anyone who knowingly gives    a false statement about a material fact in this information, or causes someone       else to do so, commits a crime and may be subject to a fine or imprisonment."
---
id: download pdf
event: download_pdf
question: |
  Your form is ready
subquestion: |
  Download and print 2 copies of your Overpayment Request Form below along with a      document outlining your Next Steps.
  
  ### Before you send this to the Social Security Administration
  
  1. Download and print 2 copies of your Request.
  2. Collect all supporting documents that will be sent with your Request including    the notice of the overpayment.
  3. Make 2 copies of all supporting documents. Send one copy of each document to      your local Social Security office at                 ${ssa_office.address.on_one_line(show_country=False) }. 
  4. Keep one copy of each document for yourself in a safe place.  
attachment code: |
  [next_steps_attachment, ssa_634_template['final']] if only_change_monthly_due else [next_steps_attachment, ssa_632_template['final'], ssa_632_addendum] if len(overflow_fields) else [next_steps_attachment, ssa_632_template['final']]
allow emailing: False
buttons:
  - Logout: logout
    url: https://www.ssa.gov/ssi/text-overpay-ussi.htm  
  - Start over: new_session
---
objects:
  - ssa_632_template: DADict
  - overflow_fields: DAList.using(auto_gather=False, object_type=DAObject)
---
code: |
  overflow_fields.clear()
  
  if len(showifdef('overpayment_why_unfair')) > 57:
    new_field = overflow_fields.appendObject()
    new_field.label = "5(c). Why was the overpayment unfair?"
    new_field.type = 'plain'
    new_field.value = overpayment_why_unfair
    new_field.overflow_trigger = 0    
    
  if len(showifdef('overpayment_other_reason_explain')) > 40:
    new_field = overflow_fields.appendObject()
    new_field.label = "5(f). Why else do you want to waive the overpayment?"
    new_field.type = 'plain'
    new_field.value = overpayment_other_reason_explain
    new_field.overflow_trigger = 0
  
  if not receives_benefits:
    if len(household) > 5:    
      new_field = overflow_fields.appendObject()
      new_field.type = 'object_list'
      new_field.label = "17. Additional household members"
      new_field.values = household[5:]
      new_field.columns = [{'name':'Name'}, {'age':'Age'}, {'relationship':'Relationship to overpaid person'}]

    if len(assets) > 5:
      new_field = overflow_fields.appendObject()
      new_field.type = 'object_list'
      new_field.label = "18. Additional Assets"
      new_field.values = assets[5:]
      for asset in assets:
        asset.name_and_address = f"{asset.institution_name} {asset.institute_address}"
        asset.income = asset.amount(period_to_use=12)
      new_field.columns = [
        {'type': 'Type of account'},
        {'name_and_address': 'Name and address of institution'},
        {'owner': 'Name on account'},
        {'balance': 'Balance'},
        {'income': 'Income'},
        {'account_number': 'Account number'}
      ]

    if len(vehicles) > 3:
      new_field = overflow_fields.appendObject()
      new_field.type = 'object_list'
      new_field.label = "19(a). Additional vehicles"
      new_field.values = vehicles[3:]
      for vehicle in vehicles:
        vehicle.ymk = vehicle.year_make_model()
      new_field.columns = [
        {'owner': 'Owner'},
        {"ymk": "Year, Make and Model"},
        {'value': 'Value'},
        {'balance': 'Loan balance'},
        {'purpose': 'Main purpose for use'}
      ]
      
    if len(real_estate) > 3:
      new_field = overflow_fields.appendObject()
      new_field.type = 'object_list'
      new_field.label = "19(b). Real estate"
      new_field.values = real_estate[3:]
      for house in real_estate:
        house.income = house.amount(period_to_use=12)
      new_field.columns = [
        {'owner': 'Owner'},
        {'description': 'Description'},
        {'market_value': 'Market Value'},
        {'balance': 'Loan balance'},
        {'income': 'Income'}
      ]

    if len(properties) > 3:
      new_field = overflow_fields.appendObject()
      new_field.type = 'object_list'
      new_field.label = "19(c). Other property, valuables, and businesses"
      new_field.values = properties[3:]
      for property in properties:
        property.income = property.amount(period_to_use=12)
      new_field.columns = [
        {'owner': 'Owner'},
        {'description': 'Description'},
        {'market_value': 'Market Value'},
        {'balance': 'Loan balance'},
        {'income': 'Income'}
      ]

  overflow_fields.gathered = True
    
      
---
attachment: 
  - name: Next Steps
    filename: Next Steps
    docx template file: Next-Steps.docx
    skip undefined: True
    variable name: next_steps_attachment
    valid formats:
      - pdf
---
need: 
  - grand_total
attachments:
  - name: Addendum (SSA-632)
    filename: SSA-632 Addendum
    docx template file: ssa-632-addendum.docx
    variable name: ssa_632_addendum
  - name: SSA-632 Request For Waiver Of Overpayment Recovery Or Change In Repayment Rate
    filename: SSA-632
    # skip undefined: True
    variable name: ssa_632_template[i]
    pdf template file: ssa-632.pdf
    # checkbox export value: "On"
    editable: False
    # TODO - finish below
    fields:
      - "record_owner": ${ recordee }
      - "record_claim_number": ${ recordee.claim_number }
      # - "record_ssn": ${ recordee.ssn }
      - "client_is_overpaid_person_yes": ${ client_is_overpaid_person }
      - "client_is_overpaid_no": ${ not client_is_overpaid_person }
      - "client_relationship_parent": |
          % if not client_is_overpaid_person:
          ${ relationship_to_user['parent'] }
          % endif
      - "client_relationship_rep_payee": |
          % if not client_is_overpaid_person:
          ${ relationship_to_user['rep_payee'] }
          % endif
      - "client_relationship_spouse": |
          % if not client_is_overpaid_person:
          ${ relationship_to_user['spouse'] }
          % endif
      - "client_relationship_legal_guardian": |
          % if not client_is_overpaid_person:
          ${ relationship_to_user['legal_guardian'] }
          % endif
      - "client_relationship_other": |
          % if not client_is_overpaid_person:
          ${ relationship_to_user['other'] }
          % endif
      - "client_relationship_other_explanation": |
          % if not client_is_overpaid_person and relationship_to_user['other']:
          ${ client_relationship_other_explanation }
          % endif
      - "client_name": ${ recordee } # TODO
      - "rep_received_benefits_yes": ${ not client_is_rep_payee } # TODO: is this still correct?
      - "rep_received_benefits_no": ${ client_is_rep_payee }
      - "someone_else_lived_with_user_yes__1": |
          % if not client_is_overpaid_person:
          ${ someone_else_lived_with_user }
          % endif
      - "someone_else_lived_with_user_yes": |
          % if not client_is_overpaid_person:
          ${ someone_else_lived_with_user }
          % endif
      - "someone_else_lived_with_user_no__1": |
          % if not client_is_overpaid_person:
          ${ not someone_else_lived_with_user }
          % endif                
      - "someone_else_lived_with_user_no": |
          % if not client_is_overpaid_person:
          ${ not someone_else_lived_with_user }
          % endif      
      - "client_lives_with_overpaid_person_yes": |
          % if not client_is_overpaid_person:
          ${ client_lives_with_overpaid_person }
          % endif
      - "client_lives_with_overpaid_person_no": |
          % if not client_is_overpaid_person:
          ${ not client_lives_with_overpaid_person}
          % endif
      - "waiver_for_minor_child_yes": |
          % if not client_is_overpaid_person:
          ${ waiver_for_minor_child }
          % endif
      - "waiver_for_minor_child_no": |
          % if not client_is_overpaid_person:
          ${ not waiver_for_minor_child }
          % endif
      - "told_ssa_no": ${ informed_ssa }
      - "told_ssa_yes": ${ not informed_ssa }
      - "possess_money_yes": ${ possess_overpayment }
      - "possess_money_no": ${ not possess_overpayment }
      - "possess_money_amount": ${ possess_overpayment_amount }
      - "money_used_for_beneficiary_yes": |
          % if someone_else_user_received_benefits:
          ${ money_used_for_beneficiary }
          % endif
      - "money_used_for_beneficiary_no": |
          % if someone_else_user_received_benefits:
          ${ not money_used_for_beneficiary }
          % endif
      - "benefits_used_for": |
          % if client_is_rep_payee:
          ${ overpayment_benefits_used_for }
          % endif
      - "ssa_told_client_must_pay_for_someone_else_yes": ${ ssa_told_client_must_pay_for_someone_else }
      - "ssa_told_client_must_pay_for_someone_else_no": ${ ssa_told_client_must_pay_for_someone_else }
      # TODO: the variable names don't line up with usage here
      - "client_received_overpaid_money_yes": ${ someone_else_user_received_benefits}
      - "client_received_overpaid_money_no": ${ not someone_else_user_received_benefits }
      - "situation_client_minor_when_received": ${ situation_at_overpayment['situation_client_minor_when_received'] }
      - "situation_client_adult_when_received": ${ situation_at_overpayment['situation_client_adult_when_received'] }
      - "situation_client_getting_disability_benefits_when_overpaid": ${ situation_at_overpayment['situation_client_getting_disability_benefits_when_overpaid'] }
      - "situation_client_getting_retirement_benefits_when_overpaid": ${ situation_at_overpayment['situation_client_getting_retirement_benefits_when_overpaid'] }
      - "situation_client_getting_parent_benefits_when_overpaid": ${ situation_at_overpayment['situation_client_getting_parent_benefits_when_overpaid'] }
      - "situation_client_getting_widow_benefits_when_overpaid": ${ situation_at_overpayment['situation_client_getting_widow_benefits_when_overpaid'] }
      - "situation_client_getting_spousal_benefits_when_overpaid": ${ situation_at_overpayment['situation_client_getting_spousal_benefits_when_overpaid'] }
      - "situation_client_getting_ssi_benefits_when_overpaid": ${ situation_at_overpayment['situation_client_getting_ssi_benefits_when_overpaid'] }
      - "situation_none_of_above_explain": ${ situation_none_of_above_explain }
      - "situation_none_of_above": ${ situation_at_overpayment.all_false() }
      - "overpayment_not_my_fault": ${overpayment_pay_less_reasons['not_my_fault'] } # TODO
      - "overpayment_cannot_afford": ${ overpayment_pay_less_reasons['cannot_afford'] }
      - "overpayment_unfair":  ${ overpayment_pay_less_reasons['unfair'] }
      - "overpayment_why_unfair": ${ overpayment_why_unfair }
      - "overpayment_thought_qualified":  ${ overpayment_pay_less_reasons['thought_disabled'] }
      - "overpayment_still_18": ${ overpayment_pay_less_reasons['18_with_ssi'] }
      - "overpayment_other_reason_explain": |
          % if overpayment_pay_less_reasons.all_false():
          ${ overpayment_other_reason_explain }
          % endif
      - "overpayment_other_reason": ${ overpayment_pay_less_reasons.all_false() }
      - "overpayment_waive_everything_yes": ${ cant_pay_at_all }
      - "overpayment_waive_everything_no": ${ not cant_pay_at_all }
      - "overpayment_waiver_second_request_no": ${ overpayment_waiver_second_request }
      - "overpayment_waiver_second_request_yes": ${ not overpayment_waiver_second_request }
      - "client_has_overpayment_notice_yes": ${ client_has_overpayment_notice }
      - "client_has_overpayment_notice_no": ${ not client_has_overpayment_notice }
      - "overpayment_notice_date": |
          % if client_has_overpayment_notice:
          ${ overpayment_notice_date }
          % endif
      - "overpayment_notice_first_overpayment": |
          % if client_has_overpayment_notice:
          ${ overpayment_notice_first_overpayment }
          % endif
      - "overpayment_notice_last_overpayment": |
          % if client_has_overpayment_notice:
          ${ overpayment_notice_last_overpayment }
          % endif
      - "overpayment_notice_exact_month": |
          % if client_has_overpayment_notice: 
          ${ overpayment_notice_exact_month }
          % endif
      - "notice_overpayment_amount": |
          % if client_has_overpayment_notice:
          ${ thousands(notice_overpayment_amount) }
          % endif
      - "overpayment_reason_income_too_high": ${ overpayment_reason['worked_many_hours']}
      - "overpayment_reason_household_income_too_high": ${ overpayment_reason['household_too_much_income']}
      - "overpayment_reason_savings_too_high": ${ overpayment_reason['money_in_bank']}
      - "overpayment_reason_got_help": ${ overpayment_reason['help_food_shelter']}
      - "overpayment_reason_double_benefits": ${ overpayment_reason['double_payment']}
      - "overpayment_reason_not_disabled": ${ overpayment_reason['not_disabled']}
      - "overpayment_reason_marital_status": ${ overpayment_reason['marriage_divorce']}
      - "overpayment_reason_workers_comp": ${ overpayment_reason['workers_comp']}
      - "overpayment_reason_nursing_home": ${ overpayment_reason['nursing_home']}
      - "overpayment_reason_jail": ${ overpayment_reason['jail_prison']}
      - "overpayment_reason_outside_us": ${ overpayment_reason['out_of_country']}
      - "overpayment_reason_immigration_status": ${ overpayment_reason['immigration_status']}
      - "overpayment_reason_another_entitlee": ${ overpayment_reason['other_entitlee']}
      - "overpayment_reason_attorney_fee_not_withheld": ${ overpayment_reason['attorney_fee']}
      - "overpayment_reason_student_status": ${ overpayment_reason['not_student']}
      - "overpayment_reason_dependent_child_status": ${ overpayment_reason['no_child']}
      - "overpayment_reason_other": ${ overpayment_reason['something_else']}
      - "overpayment_reason_other_explain": |
            % if overpayment_reason['something_else']:
            ${ overpayment_reason_other_explain }
            % endif
      - "overpayment_reason_unknown": ${ overpayment_reason['dont_know'] }
      - "client_understands_reporting_rules_yes": ${ client_understands_reporting_rules }
      - "client_understands_reporting_rules_no": ${ not client_understands_reporting_rules}
      - "client_understands_reporting_rules_no_explain": |
            % if not client_understands_reporting_rules:
            ${ client_understands_reporting_rules_no_explain }
            % endif
      - "client_prevented_from_reporting_other_yes": ${ client_prevented_from_reporting_other}
      - "client_prevented_from_reporting_other_no": ${ client_prevented_from_reporting_other }
      - "why_cant_report_to_ssa": |
            % if client_prevented_from_reporting_other:
            ${ why_cant_report_to_ssa }
            % endif
      - "told_ssa_yes__1": ${ informed_ssa }
      - "told_ssa_no__1": ${ not informed_ssa }
      - "told_ssa_phone": ${ told_ssa_how['phone'] }
      - "told_ssa_fax_letter": ${ told_ssa_how['fax'] or told_ssa_how['letter'] }
      - "told_ssa_in_person": ${ told_ssa_how['office'] }
      - "told_ssa_electronic_wage_reporting": ${ told_ssa_how['wage_reporting']}
      - "why_didnt_tell_ssa": |
            % if not informed_ssa:
            ${ did_not_inform_ssa_explanation }
            % endif
      - "told_ssa_how_other": ${ told_ssa_how['other'] }
      - "told_ssa_how_other_explain": |
            % if told_ssa_how['other']:
            ${ how_when_where }
            % endif
      - "told_ssa_dates": something
      - "told_ssa_documentation_yes": |
            % if informed_ssa:
            ${ told_ssa_documentation }
            % endif
      - "told_ssa_documentation_no": |
            % if informed_ssa:
            ${ not told_ssa_documentation}
            % endif
      - "told_ssa_documentation_explain_why_cant_send": something
      - "overpaid_before_yes": ${ not first_overpayment }
      - "overpaid_before_no": ${ first_overpayment }
      - "overpaid_before_same_reason_yes": |
            % if not first_overpayment:
            ${ overpaid_before_same_reason}
            % endif
      - "overpaid_before_same_reason_no": |
            % if not first_overpayment:
            ${ not overpaid_before_same_reason }
            % endif
      - "overpaid_before_same_reason_unknown": ${ first_overpayment is None }
      - "receiving_ssi": ${receives_benefits_type_options['SSI']}
      - "receiving_tanf": ${ receives_benefits_type_options['TAFDC'] }
      - "tanf_claim_number": |
            % if receives_benefits and receives_benefits_type_options['TAFDC']:
            ${ receives_benefits_claim_number }
            % endif
      - "receiving_va_benefits": |
            % if receives_benefits:
            ${ receives_benefits_type_options['VA'] }
            % endif
      - "va_benefits_number": |
            % if receives_benefits and receives_benefits_type_options['VA']:
            ${ receives_benefits_claim_number }
            % endif
      - "possessed_money_yes": ${ possessed_overpayment_at_notice }
      - "possessed_money_no": ${ not possessed_overpayment_at_notice }
      - "possessed_money_amount": ${currency(possessed_overpayment_at_notice_amount, decimals=False) if possessed_overpayment_at_notice else ''}
      - "possess_money_yes__1": ${ possess_overpayment }
      - "possess_money_no__1": ${ not possess_overpayment }
      - "possess_money_amount__1":  ${currency(possess_overpayment_amount, decimals=False) if possess_overpayment else ''}
      - "received_real_estate_yes": ${ received_real_estate }
      - "received_real_estate_no": ${ not received_real_estate }
      - "received_real_estate_value": |
            % if received_real_estate:
            ${ received_real_estate_amount }
            % endif
      - "gave_away_real_estate_yes": ${ gave_away_real_estate } 
      - "gave_away_real_estate_no": ${ not gave_away_real_estate }
      - "gave_away_real_estate_amount": ${ gave_away_real_estate_amount }
      - "sold_yes": ${ sold_real_estate }
      - "sold_no": ${ not sold_real_estate }
      - "sold_amount": |
            % if sold_real_estate:
            ${ sold_real_estate_amount }
            % endif
      - "gave_away_cash_yes": ${ gave_cash_after_notice }
      - "gave_away_cash_no": ${ not gave_cash_after_notice }
      - "gave_away_cash_amount": ${ currency(gave_away_cash_amount) }
      - "got_cash_yes": ${ received_cash_after_notice }
      - "got_cash_no": ${ not received_cash_after_notice }
      - "got_cash_amount": ${ currency(got_cash_amount) }
      - "dependent_1": ${household.item(0)}
      - "dependent_1_age": ${household.item(0).age}
      - "dependent_1_relationship": ${household.item(0).relationship}
      - "dependent_2": ${household.item(1)}
      - "dependent_2_age": ${household.item(1).age}
      - "dependent_2_relationship": ${household.item(1).relationship}
      - "dependent_3": ${household.item(2)}
      - "dependent_3_age": ${household.item(2).age}
      - "dependent_3_relationship": ${household.item(2).relationship}
      - "dependent_4": ${household.item(3)}
      - "dependent_4_age": ${household.item(3).age}
      - "dependent_4_relationship": ${household.item(3).relationship}
      - "dependent_5": ${ household.item(4) }
      - "dependent_5_age": ${ household.item(4).age }
      - "dependent_5_relationship": ${ household.item(4).relationship }
      - "non_tax_dependent_yes": ${ non_tax_dependent }
      - "non_tax_dependent_no": ${ not non_tax_dependent }
      - "non_tax_dependent_contributes_to_expenses_yes": |
            % if non_tax_dependent:
            ${ non_tax_dependent_contributes_to_expenses }
            % endif
      - "non_tax_dependent_contributes_to_expenses_no": |
            % if non_tax_dependent:
            ${ not non_tax_dependent_contributes_to_expenses }
            % endif
      - "non_tax_dependent_contributes_to_expenses_amount": |
            % if non_tax_dependent and non_tax_dependent_contributes_to_expenses:
            ${ currency(non_tax_dependent_contributes_to_expenses_amount) }
            % endif
      - "account_1_type": ${ assets.item(0).type }
      - "account_1_name_address": ${ assets.item(0).institution_name } ${ assets.item(0).institute_address } 
      - "account_1_owner": ${ assets.item(0).owner }
      - "account_1_balance": ${ assets.item(0).balance }
      - "account_1_income": ${ assets.item(0).amount(period_to_use=12) }
      - "account_1_number": ${ assets.item(0).account_number }
      - "account_2_type": ${ assets.item(1).type }
      - "account_2_name_address": ${ assets.item(1).institution_name } ${ assets.item(1).institute_address } 
      - "account_2_owner": ${ assets.item(1).owner }
      - "account_2_balance": ${ assets.item(1).balance }
      - "account_2_income": ${ assets.item(1).amount(period_to_use=12) }
      - "account_2_number": ${ assets.item(1).account_number }
      - "account_3_type": ${ assets.item(2).type }
      - "account_3_name_address": ${ assets.item(2).institution_name } ${ assets.item(2).institute_address } 
      - "account_3_owner": ${ assets.item(2).owner }
      - "account_3_balance": ${ assets.item(2).balance }
      - "account_3_income": ${ assets.item(2).amount(period_to_use=12) }
      - "account_3_number": ${ assets.item(2).account_number }
      - "account_4_type": ${ assets.item(3).type }
      - "account_4_name_address": ${ assets.item(3).institution_name } ${ assets.item(3).institute_address } 
      - "account_4_owner": ${ assets.item(3).owner }
      - "account_4_balance": ${ assets.item(3).balance }
      - "account_4_income": ${ assets.item(3).amount(period_to_use=12) }
      - "account_4_number": ${ assets.item(3).account_number }
      - "account_5_type": ${ assets.item(4).type }
      - "account_5_name_address": ${ assets.item(4).institution_name } ${ assets.item(4).institute_address } 
      - "account_5_owner": ${ assets.item(4).owner }
      - "account_5_balance": ${ assets.item(4).balance }
      - "account_5_income": ${ assets.item(4).amount(period_to_use=12) }
      - "account_5_number": ${ assets.item(4).account_number }
      - "accounts_total_balance": ${ assets.market_value_total() }
      - "accounts_total_income": ${ assets.total(period_to_use=12) }
      - "client_owns_car_yes": ${ vehicles.there_are_any }
      - "client_owns_car_no": ${ not vehicles.there_are_any }
      - "vehicle_owner_1": ${vehicles.item(0).owner}
      - "vehicle_year_make_model_1": ${vehicles.item(0).year_make_model() }
      - "vehicle_pv_1": ${thousands(vehicles.item(0).value)}
      - "vehicle_loan_balance_1": ${thousands(vehicles.item(0).balance)}
      - "vehicle_purpose_1": ${vehicles.item(0).primary_purpose}
      - "vehicle_owner_2": ${vehicles.item(1).owner}
      - "vehicle_year_make_model_2": ${vehicles.item(1).year_make_model() }
      - "vehicle_pv_2": ${thousands(vehicles.item(1).value)}
      - "vehicle_loan_balance_2": ${thousands(vehicles.item(1).balance)}
      - "vehicle_purpose_2": ${vehicles.item(1).primary_purpose}
      - "vehicle_owner_3": ${vehicles.item(2).owner}
      - "vehicle_year_make_model_3": ${vehicles.item(2).year_make_model() }
      - "vehicle_pv_3": ${thousands(vehicles.item(2).value)}
      - "vehicle_loan_balance_3": ${thousands(vehicles.item(2).balance)}
      - "vehicle_purpose_3": ${vehicles.item(2).primary_purpose}
      - "vehicle_total_value": ${ vehicles.total() }
      - "client_owns_real_estate_yes": ${ real_estate.there_are_any }
      - "client_owns_real_estate_no": ${ not real_estate.there_are_any }
      - "real_property_owner_1": ${real_estate.item(0).owner}
      - "real_property_description_1": ${real_estate.item(0).description}
      - "real_property_value_1": ${thousands(real_estate.item(0).market_value)}
      - "real_property_loan_balance_1": ${thousands(real_estate.item(0).balance)}
      - "real_property_income_1": ${currency(real_estate.item(0).amount(period_to_use=12), decimals=False)}
      - "real_property_owner_2": ${real_estate.item(1).owner}
      - "real_property_description_2": ${real_estate.item(1).description}
      - "real_property_value_2": ${thousands(real_estate.item(1).market_value)}
      - "real_property_loan_balance_2": ${thousands(real_estate.item(2).balance)}
      - "real_property_income_2": ${currency(real_estate.item(0).amount(period_to_use=12), decimals=False)}
      - "real_property_owner_3": ${real_estate.item(2).owner}
      - "real_property_description_3": ${real_estate.item(2).description}
      - "real_property_value_3": ${thousands(real_estate.item(2).market_value)}
      - "real_property_loan_balance_3": ${thousands(real_estate.item(2).balance)}
      - "real_property_income_3": ${currency(real_estate.item(2).amount(period_to_use=12), decimals=False)}
      - "real_property_total_income": ${ real_estate.total(period_to_use=12) }
      - "real_property_total_loan": ${ real_estate.balance_total() }
      - "real_property_total_value": ${ real_estate.market_value_total() }
      - "real_estate_countable_value": ${ real_estate.market_value_total() -                  real_estate.balance_total() }
      - "client_interest_business_yes": ${ properties.there_are_any}
      - "client_interest_business_no": ${ not properties.there_are_any}
      - "business_income_1": ${ properties.item(0).value}
      - "business_description_1": ${ properties.item(0).description }
      - "business_value_1": ${ properties.item(0).market_value}
      - "business_loan_balance_1": ${ properties.item(0).balance}
      - "business_owner_1": ${ properties.item(0).owner}
      - "business_owner_2": ${ properties.item(1).owner}
      - "business_description_2": ${ properties.item(1).description}
      - "business_value_2": ${ properties.item(1).market_value}
      - "business_loan_balance_2": ${ properties.item(1).balance }
      - "business_income_2": ${ properties.item(1).value }
      - "business_description_3": ${ properties.item(2).description }
      - "business_value_3": ${ properties.item(2).market_value}
      - "business_loan_balance_3": ${ properties.item(2).balance}
      - "business_income_3": ${ properties.item(2).value }
      - "business_total_income": ${ currency(properties.total(period_to_use=12)) }
      - "business_total_value": ${ currency(properties.total_market_value() ) }
      - "business_total_loan": ${ currency(properties.balance_total() ) }
      - "user_employed_yes": ${yesno(client.jobs.there_are_any)}
      - "user_employed_no": ${noyes( client.jobs.there_are_any)}
      # Always use monthly total because client may have multiple jobs
      # - "user_wages_weekly": ${ client.jobs.item(0).period == 52 }
      # - "user_wages_biweekly": ${ client.jobs.item(0).period == 26 }
      - "user_wages_monthly": ${ True if client.jobs.there_are_any else False }
      #- "user_wages_bimonthly": ${ client.jobs.item(0).period == 6 }
      - "user_employer_name_address_phone": ${client.jobs.item(0).name_address_phone()}
      - "user_wages_net": ${thousands(client.jobs.net_total(period_to_use=12))}
      - "spouse_employed_yes": ${yesno(spouse.jobs.there_are_any)}
      - "spouse_employed_no": ${noyes( spouse.jobs.there_are_any)}
      #- "spouse_wages_weekly": No
      #- "spouse_wages_biweekly": No
      - "spouse_wages_monthly": ${ True if spouse.jobs.there_are_any else False }
      #- "spouse_wages_bimonthly": No
      - "spouse_employer_name_address_phone": ${spouse.jobs.item(0).name_address_phone()}
      - "spouse_wages_net": ${thousands(spouse.jobs.net_total(period_to_use=12))}
      - "dependent_employed_yes": ${yesno(household.jobs)}
      - "dependent_employed_no": ${noyes( household.jobs)}
      - "dependent_employed_names": ${household.jobs.item(0).whose_job}
      - "dependent_wages_net": ${thousands(household.jobs.net_total())}
      - "receive_support_yes": ${yesno(receives_support)}
      - "receive_support_no": ${noyes( receives_support)}
      - "receive_support_loan_yes": ${ support_from_loan }
      - "receive_support_loan_no": ${ not support_from_loan}
      - "receive_support_source": ${comma_and_list(support_sources)}
      - "receive_support_amount": ${thousands(client.incomes.total(type='other support') + spouse.incomes.total(type='other support') + household.incomes.total(type='other support'))}
      - "user_net_pay_total": ${thousands(client.jobs.net_total(period_to_use=12))}
      - "spouse_net_pay_total": ${thousands(spouse.jobs.net_total(period_to_use=12))}
      - "dependent_net_pay_total": ${thousands(household.jobs.net_total(period_to_use=12))}
      - "user_ss_total": ${currency(client.incomes.total(period_to_use=12, type='SSR'), decimals=False)}
      - "spouse_ss_total": ${currency(spouse.incomes.total(period_to_use=12, type='SSR'), decimals=False)}
      - "dependent_ss_total": ${currency(household.incomes.total(period_to_use=12, type='SSR'), decimals=False)}
      - "spouse_ssi_total": ${currency(spouse.incomes.total(period_to_use=12, type='SSI'), decimals=False)}
      - "user_ssi_total": ${currency(client.incomes.total(period_to_use=12, type='SSI'), decimals=False)}
      - "dependent_ssi_total": ${currency(household.incomes.total(period_to_use=12, type='SSI'), decimals=False)}
      - "pension_type_1": ${client.incomes.matches('pension').item(0).name + ' ' + spouse.incomes.matches('pension').item(0).name + ' ' + spouse.incomes.matches('pension').item(0).name}
      - "user_pension_1": ${currency(client.incomes.matches('pension').item(0).amount(period_to_use=12), decimals=False)}
      - "spouse_pension_1": ${currency(spouse.incomes.matches('pension').item(0).amount(period_to_use=12), decimals=False)}
      - "dependent_pension_1": ${currency(household.incomes.matches('pension').item(0).amount(period_to_use=12), decimals=False)}
      - "pension_type_2": ${client.incomes.matches('pension').item(1).name.full() + ' ' + spouse.incomes.matches('pension').item(1).name.full() + ' ' +  household.incomes.matches('pension').item(1).name.full()}
      - "user_pension_2": ${currency(client.incomes.matches('pension').item(1).amount(period_to_use=12), decimals=False)}
      - "spouse_pension_2": ${currency(spouse.incomes.matches('pension').item(1).amount(period_to_use=12), decimals=False)}
      - "dependent_pension_2": ${currency(household.incomes.matches('pension').item(1).amount(period_to_use=12), decimals=False)}
      - "user_snap_total": ${currency(client.incomes.total(type='SNAP',period_to_use=12), decimals=False)}
      - "spouse_snap_total": ${currency(spouse.incomes.total(type='public assistance',period_to_use=12), decimals=False)}
      - "dependent_snap_total": ${currency(household.incomes.total(type='public assistance',period_to_use=12), decimals=False)}
      - "user_rent_income_total": ${currency(client.incomes.total(type='rent',period_to_use=12), decimals=False)}
      - "spouse_rent_income_total": ${currency(spouse.incomes.total(type='rent',period_to_use=12), decimals=False)}
      - "dependent_rent_income_total": ${currency(household.incomes.total(type='rent',period_to_use=12), decimals=False)}
      - "user_room_board_total": ${currency(client.incomes.total(type='room and board',period_to_use=12), decimals=False)}
      - "spouse_room_board_total": ${currency(spouse.incomes.total(type='room and board',period_to_use=12), decimals=False)}
      - "dependent_room_board_total": ${currency(household.incomes.total(type='room and board',period_to_use=12), decimals=False)}
      - "user_child_support_total": ${currency(client.incomes.total(type='child support',period_to_use=12), decimals=False)}
      - "spouse_child_support_total": ${currency(spouse.incomes.total(type='child support',period_to_use=12), decimals=False)}
      - "dependent_child_support_total": ${currency(household.incomes.total(type='child support',period_to_use=12), decimals=False)}
      - "user_other_support_total": ${currency(client.incomes.total(type='other support',period_to_use=12), decimals=False)}
      - "spouse_other_support_total": ${currency(spouse.incomes.total(type='other support',period_to_use=12), decimals=False)}
      - "dependent_other_support_total": ${currency(household.incomes.total(type='other support',period_to_use=12), decimals=False)}
      - "user_asset_income_total": ${currency(assets.total(owner=client,period_to_use=12), decimals=False)}
      - "spouse_asset_income_total": | 
          % if has_spouse:
          ${currency(assets.total(owner=spouse,period_to_use=12), decimals=False)}
          % endif
      - "dependent_asset_income_total": | 
          % if household.there_are_any:
          ${currency(assets.total(period_to_use=12) - assets.total(owner=client,period_to_use=12) - assets.total(owner=spouse,period_to_use=12), decimals=False)}
          % endif
      - "user_other_total": ${currency(client.incomes.total(type='other',period_to_use=12), decimals=False)}
      - "spouse_other_total": ${currency(spouse.incomes.total(type='other',period_to_use=12), decimals=False)}
      - "dependent_other_total": ${currency(household.incomes.total(type='other',period_to_use=12), decimals=False)}
      - "user_income_total": ${thousands(client.incomes.total(period_to_use=12) + assets.total(owner=client,period_to_use=12) + client.jobs.total(period_to_use=12))}
      - "spouse_income_total": | 
          % if has_spouse:
          {thousands(spouse.incomes.total(period_to_use=12) + assets.total(owner=spouse,period_to_use=12) + spouse.jobs.total(period_to_use=12))}
          % endif$
      - "dependent_income_total": | 
          % if household.there_are_any:
          ${thousands(household.incomes.total(period_to_use=12) + assets.total(period_to_use=12) - assets.total(owner=client,period_to_use=12) - assets.total(owner=spouse,period_to_use=12) + household.jobs.total(period_to_use=12))}
          % endif
      - "grand_total": ${thousands(grand_total)}
      - "remarks": ${ income_remarks }
      - "expense_rent": ${currency(expenses.total(type='rent',period_to_use=12) + expenses.total(type='mortgage',period_to_use=12), decimals=False)}
      - "expense_food": ${currency(expenses.total(type='food',period_to_use=12), decimals=False)}
      - "expense_utilities": ${currency(expenses.total(type='utilities',period_to_use=12), decimals=False)}
      - "expense_fuel": ${currency(expenses.total(type='fuel',period_to_use=12), decimals=False)}
      - "expense_clothing": ${currency(expenses.total(type='clothing',period_to_use=12), decimals=False)}
      - "expense_household_items": ${currency(expenses.total(type='household items',period_to_use=12), decimals=False)}
      - "expense_property_tax": ${currency(expenses.total(type='property tax',period_to_use=12), decimals=False)}
      - "expense_insurance": ${currency(expenses.total(type='insurance', period_to_use=12), decimals=False) }
      - "expense_medical": ${currency(expenses.total(type='medical',period_to_use=12), decimals=False)}
      - "expense_car_loan": ${currency(expenses.total(type='car loan',period_to_use=12), decimals=False)}
      - "expense_car": ${currency(expenses.total(type='auto',period_to_use=12), decimals=False)}
      - "expense_transportation": ${currency(expenses.total(type='transportation',period_to_use=12), decimals=False)}
      - "expense_tuition": ${currency(expenses.total(type='school',period_to_use=12), decimals=False)}
      - "expense_court_ordered": ${ currency(expenses.total(type='court order', period_to_use=12), decimals=False) }
      - "expense_cc_minimum": ${ currency(expenses.total(type='credit cards',period_to_use=12), decimals=False) }
      - "expense_other":  ${ currency(expenses.total(type='other',period_to_use=12), decimals=False)}
      - "expense_total": ${ expenses.total(period_to_use=12)}
      - "expense_remarks": ${ expense_remarks }
      - "monthly_income": ${thousands(grand_total)} 
      - "monthly_expenses": ${thousands(monthly_expenses)}
      - "adjusted_expenses": ${thousands(adjusted_expenses)}
      - "expense_vs_income_total": ${ thousands(grand_total - adjusted_expenses) }
      - "expenses_exceed_income_explanation": ${expenses_exceed_income_explanation if expenses_exceed_income else ''}
      - "financial_situation_will_change_yes": ${ will_receive_inheritance }
      - "financial_situation_will_change_no": ${ not will_receive_inheritance }
      - "financial_situation_will_change_explanation": ${ will_receive_inheritance_explanation }
      - "assets_grand_total": ${ assets.total() }
      - "cant_convert_countable_asset_yes": ${yesno(assets_cannot_be_sold) if non_cash_assets else ''}
      - "cant_convert_countable_asset_no": ${noyes(assets_cannot_be_sold) if non_cash_assets else ''}
      - "cant_convert_countable_asset_explanation": ${assets_cannot_be_sold_explanation if non_cash_assets and assets_cannot_be_sold else ''}
      - "remarks_continued": ${ other_remarks }
      - "authorize_disclosure_to_ssa_yes": ${ authorize_disclosure_to_ssa }
      - "authorize_disclosure_to_ssa_no": ${ not authorize_disclosure_to_ssa }
      - "customer_signature": |
          ${ client.signature }
      - "user_mailing_address": ${ client.address.block() }
      - "signature_date": ${ today() }
      - "legal_representative_signature": |
          ${ client.signature }
      - "legal_representative_mailing_address": something
      - "signature_date_2": ${ today() }
      - "user_signature": |
          ${ showifdef('client.signature') }
      - "user_signature_date": ${ today() }
      - "phone_home": ${ client.phone_number }
      - "phone_work": ${ client.phone_work }
      - "user_address": ${ client.address.line_one() }
      - "user_city": ${ client.address.city }
      - "user_state": ${ client.address.state }
      - "user_zip": ${ client.address.zip }